// This .pop file defines a Population, and is usually owned and
// controlled by the tf_populator entity.
//
// Populations consist of one or more Populators.  
// All Populators in a .pop file run simultaneously unless stated otherwise. 
// For example, if you have three PeriodicSpawn populators, all three
// will be spawning entities according to their parameters.
// 
// In general, Populators contain one Spawner.  When a Spawner is invoked,
// it actually spawns one or more entities into the world. 

// NOTE: This particular .pop file is for documentation purposes, and
// tries to show all available features, not necessarily a useful population.
//

// Available Global Options (specified outside Populators):
//
// StartingCurrency	<amount>
//		Specifies the amount of currency that players should start with
//

// Templates are specified in a separate block of Templates, and then referenced 
// inside WaveSpawn or TFBot entries. 

// Available Populators:
//
// RandomPlacement
//		A RandomPlacement Populator is invoked once at the start
//		of each round, and spawns entities at random locations
//		throughout the map. For example, a RandomPlacement might
//		place random Sentry guns throughout a map.
//
// PeriodicSpawn
//		A PeriodicSpawn Populator invokes its Spawner periodically.
//		For example, a PeriodicSpawn might spawn a TFBot every 30 seconds.
//
// WaveSpawn
//		A WaveSpawn Populator spawns a "wave" of N entities, and has
//		the special property that only ONE WaveSpawn at a time in a
//		.pop file is active - the first one. Once that WaveSpawn is
//		finished, it shuts off and the next WaveSpawn in the file
//		becomes active, and so on.
// 


// Available Spawners:
//
// TFBot 
//		Spawns TFBots of a specified class and skill.
//
// SentryGun
//		Spawns unowned Sentry guns at a specified upgrade level.
//
// RandomChoice
//		Contains a set of spawners and invokes one at random.
//
// Squad
//		Contains a set of spawners, all are invoked and collected into a "squad".
//
// Mob
//		Spawns N instances of the spawner it contains, ie: 15 TFBots.
//


Population
{
	// Global options
	StartingCurrency				100		// Players start with 100 bucks
	RespawnWaveTime					12		// Override default respawn time as if it was being set with entity i/o
	CanBotsAttackWhileInSpawnRoom	no		// Default if omitted is "yes".  Set to "no" to prevent bots from attacking while invulnerable in their spawn rooms
	AddSentryBusterWhenDamageDealtExceeds 3000 // Default is ommited is 3000 points of damage inflicted by your sentry gun. Set this to override the threshold at which a Sentry Buster will be dispatched.
	AddSentryBusterWhenKillCountExceeds 15	// Default is ommited is 15 kills inflicted by your sentry gun. Set this to override the threshold at which a Sentry Buster will be dispatched.
	Advanced	1							// Flags this experienced as difficult.  Things like achievements look for this.
	
	Templates
	{
		// A template for a TFBot entry that creates a Natascha wielding Heavy.
		T_TFBot_NataschaHeavy
		{
			Class HeavyWeapons
			Skill Easy
			Attributes RemoveOnDeath
			Item "Natascha"
			Item "Football Helmet"
		}
	
		// A template for a WaveSpawn creates 5 Natascha wielding Heavies. 
		//	- Note that you can reference other templates inside templates.
		//	- In this example, the wave spawn template overrides the skill of the Heavies to be Normal (which the Template has initialized as Easy)
		T_WaveSpawn_Heavies
		{
			TotalCount 5
			MaxActive 1
			WaveDoneWhen AllDead		

			TFBot
			{
				Template T_TFBot_NataschaHeavy
				Skill Normal   
			}
		}
		
		// A template for a WaveSpawn that creates Pyros, and drops lots of money. 
		T_WaveSpawn_MoneyPyros
		{
			Template T_WaveSpawn_Heavies
			
			TotalCurrency 2000
			
			// WARNING NOTE: This block overrides the entire TFBot block in T_WaveSpawn_Heavies.
			// i.e. this will NOT result in Pyros wielding natachas & helmets & being restricted to melee only.
			TFBot
			{
				Class Pyro
			}
		}
	}

	// A "mission" defines a set of TFBots that the "AI Director" can send in to accomplish certain context-specific goals	
	Mission
	{
		Objective Sniper							// The mission objective. Available missions: 
													//    "Sniper" (add harassing snipers)
													//    "Spy" (add harassing spies)
													//    "DestroySentries" (send in bots who focus on killing overly successful sentry guns)
													//    "Engineer" (add harassing engineers who will build sentry nests on bot_hint_sentrygun entities)

		Where redspawn_1					// Where the mission bots will spawn

		TeleportWhere								// For Engineer missions. When the bot builds a teleporter, that teleporter will become a spawn point for bots with a Where name matching this TeleportWhere name.

		BeginAtWave 4								// The wave number (1 to N) at which this mission becomes active
		RunForThisManyWaves 3						// How many waves this mission is active. This example would have snipers active for waves 4, 5, and 6
		
		CooldownTime 90								// The minimum time between spawning mission sorties
		DesiredCount 2								// How many copies of the spawner should be sent in

		TFBot										// The mission payload
		{
			Class Sniper
			Skill Hard
			Name Sniper
		}
	}


	// this populator places 10 level three sentry guns scattered throughout the map, but only on navigation areas marked as SENTRY_SPOT
	RandomPlacement
	{
		Count 10
		
		MinimumSeparation 750
		
		NavAreaFilter SENTRY_SPOT			// when collecting potential nav areas to spawn, only consider areas that have the SENTRY_SPOT flag
		
		SentryGun							// a Spawner that spawns a Sentry gun
		{
			Level 3							// ... a level 3 Sentry gun (can be 1 or 2 as well)
		}
	}

	
	// every 60 to 90 seconds, spawn either a melee-only mob of TFBots that chase down the players
	// or spawn a squad of 4 TFBots that move together and attack the players
	PeriodicSpawn
	{
		Where redspawn_1						// find a nearby hidden spot behind the players to spawn

		When								// specify how often our Spawner is invoked. In this case, we pick a random
		{									// interval between 60 and 90 seconds.  Alternatively, we could also say
			MinInterval 60					// "When 30" to invoke our Spawner every 30 seconds.
			MaxInterval 90
		}
		
		// our Spawner is a RandomChoice, which picks at random from the Spawners it contains
		RandomChoice
		{
			TFBot
			{
				Class Sniper
				Skill Normal
				Attributes RemoveOnDeath			
			}

			TFBot
			{
				Class Spy
				Skill Normal
				Attributes RemoveOnDeath			
			}
			Squad		// choice 1: a Squad Spawner which, in this case, creates a squad of 4 TFBots: Soldier, Pyro, Demoman, and Heavyweapons
			{
				FormationSize 125	// the size of the formation (for a circle formation, this is the radius)

				TFBot
				{
					Class Soldier
					Skill Easy
				}

				TFBot
				{
					Class Pyro
					Skill Easy
				}

				TFBot
				{
					Class Demoman
					Skill Easy
				}

				TFBot
				{
					Class HeavyWeapons
					Skill Easy
				}
			}

			Mob		// choice 2: a Mob Spawner which will create a mob of 15 bat-wielding Scout mobbers
			{
				Count 15

				TFBot
				{
					Class Scout
					WeaponRestrictions MeleeOnly				
					BehaviorModifiers Mobber
				}
			}
			
			Mob		// choice 3: a Mob Spawner which will create a mob of 15 fist-wielding Heavy mobbers
			{
				Count 15

				TFBot
				{
					Class HeavyWeapons
					WeaponRestrictions MeleeOnly				
					BehaviorModifiers Mobber
				}
			}
			
			Mob		// choice 4: a Mob Spawner which will create a mob of 15 axe-wielding Pyro mobbers
			{
				Count 15

				TFBot
				{
					Class Pyro
					WeaponRestrictions MeleeOnly				
					BehaviorModifiers Mobber
				}
			}
			
			Mob		// choice 5: a Mob Spawner which will create a mob of 15 knife-wielding Spy mobbers
			{
				Count 15

				TFBot
				{
					Class Spy
					WeaponRestrictions MeleeOnly
					BehaviorModifiers Mobber
				}
			}
		}
	}
}
